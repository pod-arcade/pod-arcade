// Generated by go-wayland-scanner
// https://github.com/rajveermalviya/go-wayland/cmd/go-wayland-scanner
// XML file : ./wlr-virtual-pointer-unstable-v1.xml
//
// wlr_virtual_pointer_unstable_v1 Protocol Copyright:
//
// Copyright Â© 2019 Josef Gajdusek
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice (including the next
// paragraph) shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

package wlr_virtual_pointer

import "github.com/rajveermalviya/go-wayland/wayland/client"

// ZwlrVirtualPointerV1 : virtual pointer
//
// This protocol allows clients to emulate a physical pointer device. The
// requests are mostly mirror opposites of those specified in wl_pointer.
type ZwlrVirtualPointerV1 struct {
	client.BaseProxy
}

// NewZwlrVirtualPointerV1 : virtual pointer
//
// This protocol allows clients to emulate a physical pointer device. The
// requests are mostly mirror opposites of those specified in wl_pointer.
func NewZwlrVirtualPointerV1(ctx *client.Context) *ZwlrVirtualPointerV1 {
	zwlrVirtualPointerV1 := &ZwlrVirtualPointerV1{}
	ctx.Register(zwlrVirtualPointerV1)
	return zwlrVirtualPointerV1
}

// Motion : pointer relative motion event
//
// The pointer has moved by a relative amount to the previous request.
//
// Values are in the global compositor space.
//
//	time: timestamp with millisecond granularity
//	dx: displacement on the x-axis
//	dy: displacement on the y-axis
func (i *ZwlrVirtualPointerV1) Motion(time uint32, dx float64, dy float64) error {
	const opcode = 0
	const _reqBufLen = 8 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutFixed(_reqBuf[l:l+4], dx)
	l += 4
	client.PutFixed(_reqBuf[l:l+4], dy)
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// MotionAbsolute : pointer absolute motion event
//
// The pointer has moved in an absolute coordinate frame.
//
// Value of x can range from 0 to x_extent, value of y can range from 0
// to y_extent.
//
//	time: timestamp with millisecond granularity
//	x: position on the x-axis
//	y: position on the y-axis
//	xExtent: extent of the x-axis
//	yExtent: extent of the y-axis
func (i *ZwlrVirtualPointerV1) MotionAbsolute(time uint32, x uint32, y uint32, xExtent uint32, yExtent uint32) error {
	const opcode = 1
	const _reqBufLen = 8 + 4 + 4 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(x))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(y))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(xExtent))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(yExtent))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// Button : button event
//
// A button was pressed or released.
//
//	time: timestamp with millisecond granularity
//	button: button that produced the event
//	state: physical state of the button
func (i *ZwlrVirtualPointerV1) Button(time uint32, button uint32, state uint32) error {
	const opcode = 2
	const _reqBufLen = 8 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(button))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(state))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// Axis : axis event
//
// Scroll and other axis requests.
//
//	time: timestamp with millisecond granularity
//	axis: axis type
//	value: length of vector in touchpad coordinates
func (i *ZwlrVirtualPointerV1) Axis(time uint32, axis uint32, value float64) error {
	const opcode = 3
	const _reqBufLen = 8 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(axis))
	l += 4
	client.PutFixed(_reqBuf[l:l+4], value)
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// Frame : end of a pointer event sequence
//
// Indicates the set of events that logically belong together.
func (i *ZwlrVirtualPointerV1) Frame() error {
	const opcode = 4
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// AxisSource : axis source event
//
// Source information for scroll and other axis.
//
//	axisSource: source of the axis event
func (i *ZwlrVirtualPointerV1) AxisSource(axisSource uint32) error {
	const opcode = 5
	const _reqBufLen = 8 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(axisSource))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// AxisStop : axis stop event
//
// Stop notification for scroll and other axes.
//
//	time: timestamp with millisecond granularity
//	axis: the axis stopped with this event
func (i *ZwlrVirtualPointerV1) AxisStop(time uint32, axis uint32) error {
	const opcode = 6
	const _reqBufLen = 8 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(axis))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// AxisDiscrete : axis click event
//
// Discrete step information for scroll and other axes.
//
// This event allows the client to extend data normally sent using the axis
// event with discrete value.
//
//	time: timestamp with millisecond granularity
//	axis: axis type
//	value: length of vector in touchpad coordinates
//	discrete: number of steps
func (i *ZwlrVirtualPointerV1) AxisDiscrete(time uint32, axis uint32, value float64, discrete int32) error {
	const opcode = 7
	const _reqBufLen = 8 + 4 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(time))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(axis))
	l += 4
	client.PutFixed(_reqBuf[l:l+4], value)
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(discrete))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// Destroy : destroy the virtual pointer object
func (i *ZwlrVirtualPointerV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 8
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

type ZwlrVirtualPointerV1Error uint32

// ZwlrVirtualPointerV1Error :
const (
	// ZwlrVirtualPointerV1ErrorInvalidAxis : client sent invalid axis enumeration value
	ZwlrVirtualPointerV1ErrorInvalidAxis ZwlrVirtualPointerV1Error = 0
	// ZwlrVirtualPointerV1ErrorInvalidAxisSource : client sent invalid axis source enumeration value
	ZwlrVirtualPointerV1ErrorInvalidAxisSource ZwlrVirtualPointerV1Error = 1
)

func (e ZwlrVirtualPointerV1Error) Name() string {
	switch e {
	case ZwlrVirtualPointerV1ErrorInvalidAxis:
		return "invalid_axis"
	case ZwlrVirtualPointerV1ErrorInvalidAxisSource:
		return "invalid_axis_source"
	default:
		return ""
	}
}
func (e ZwlrVirtualPointerV1Error) Value() string {
	switch e {
	case ZwlrVirtualPointerV1ErrorInvalidAxis:
		return "0"
	case ZwlrVirtualPointerV1ErrorInvalidAxisSource:
		return "1"
	default:
		return ""
	}
}
func (e ZwlrVirtualPointerV1Error) String() string {
	return e.Name() + "=" + e.Value()
}

// ZwlrVirtualPointerManagerV1 : virtual pointer manager
//
// This object allows clients to create individual virtual pointer objects.
type ZwlrVirtualPointerManagerV1 struct {
	client.BaseProxy
}

// NewZwlrVirtualPointerManagerV1 : virtual pointer manager
//
// This object allows clients to create individual virtual pointer objects.
func NewZwlrVirtualPointerManagerV1(ctx *client.Context) *ZwlrVirtualPointerManagerV1 {
	zwlrVirtualPointerManagerV1 := &ZwlrVirtualPointerManagerV1{}
	ctx.Register(zwlrVirtualPointerManagerV1)
	return zwlrVirtualPointerManagerV1
}

// CreateVirtualPointer : Create a new virtual pointer
//
// Creates a new virtual pointer. The optional seat is a suggestion to the
// compositor.
func (i *ZwlrVirtualPointerManagerV1) CreateVirtualPointer(seat *client.Seat) (*ZwlrVirtualPointerV1, error) {
	id := NewZwlrVirtualPointerV1(i.Context())
	const opcode = 0
	const _reqBufLen = 8 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	if seat == nil {
		client.PutUint32(_reqBuf[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(_reqBuf[l:l+4], seat.ID())
		l += 4
	}
	client.PutUint32(_reqBuf[l:l+4], id.ID())
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return id, err
}

// Destroy : destroy the virtual pointer manager
func (i *ZwlrVirtualPointerManagerV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 1
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// CreateVirtualPointerWithOutput : Create a new virtual pointer
//
// Creates a new virtual pointer. The seat and the output arguments are
// optional. If the seat argument is set, the compositor should assign the
// input device to the requested seat. If the output argument is set, the
// compositor should map the input device to the requested output.
func (i *ZwlrVirtualPointerManagerV1) CreateVirtualPointerWithOutput(seat *client.Seat, output *client.Output) (*ZwlrVirtualPointerV1, error) {
	id := NewZwlrVirtualPointerV1(i.Context())
	const opcode = 2
	const _reqBufLen = 8 + 4 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	if seat == nil {
		client.PutUint32(_reqBuf[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(_reqBuf[l:l+4], seat.ID())
		l += 4
	}
	if output == nil {
		client.PutUint32(_reqBuf[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(_reqBuf[l:l+4], output.ID())
		l += 4
	}
	client.PutUint32(_reqBuf[l:l+4], id.ID())
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return id, err
}
