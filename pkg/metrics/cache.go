package metrics

import (
	"fmt"
	"sync"

	"github.com/prometheus/client_golang/prometheus"
)

// MetricCache caches different types of Prometheus metrics by label.
type MetricCache struct {
	mu         sync.Mutex
	counters   map[string]prometheus.Counter
	gauges     map[string]prometheus.Gauge
	histograms map[string]prometheus.Histogram
}

// NewMetricCache initializes a new metric cache.
func NewMetricCache() *MetricCache {
	return &MetricCache{
		counters:   make(map[string]prometheus.Counter),
		gauges:     make(map[string]prometheus.Gauge),
		histograms: make(map[string]prometheus.Histogram),
	}
}

// getKey generates a unique key for a metric based on its name and labels.
func getKey(name string, labels prometheus.Labels) string {
	return fmt.Sprintf("%s|%v", name, labels)
}

// GetCounter retrieves or creates a counter from the cache.
func (mc *MetricCache) GetCounter(name string, labels prometheus.Labels) prometheus.Counter {
	mc.mu.Lock()
	defer mc.mu.Unlock()

	key := getKey(name, labels)
	if counter, ok := mc.counters[key]; ok {
		return counter
	}

	// Create and register a new counter.
	counter := Factory.NewCounter(prometheus.CounterOpts{
		Name:        name,
		ConstLabels: labels,
		Help:        name + " autogenerated counter",
	})
	mc.counters[key] = counter

	return counter
}

// GetGauge retrieves or creates a gauge from the cache.
func (mc *MetricCache) GetGauge(name string, labels prometheus.Labels) prometheus.Gauge {
	mc.mu.Lock()
	defer mc.mu.Unlock()

	key := getKey(name, labels)
	if gauge, ok := mc.gauges[key]; ok {
		return gauge
	}

	// Create and register a new gauge.
	gauge := Factory.NewGauge(prometheus.GaugeOpts{
		Name:        name,
		ConstLabels: labels,
		Help:        name + " autogenerated gauge",
	})
	mc.gauges[key] = gauge

	return gauge
}

// GetHistogram retrieves or creates a histogram from the cache.
func (mc *MetricCache) GetHistogram(name string, labels prometheus.Labels, buckets []float64) prometheus.Histogram {
	mc.mu.Lock()
	defer mc.mu.Unlock()

	key := getKey(name, labels)
	if histogram, ok := mc.histograms[key]; ok {
		return histogram
	}

	// Create and register a new histogram.
	histogram := Factory.NewHistogram(prometheus.HistogramOpts{
		Name:        name,
		ConstLabels: labels,
		Buckets:     buckets,
		Help:        name + " autogenerated histogram",
	})
	mc.histograms[key] = histogram

	return histogram
}

// Global metric cache instance.
var GlobalMetricCache = NewMetricCache()
